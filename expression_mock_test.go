// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vpriem/dynamorm (interfaces: Expression)
//
// Generated by this command:
//
//	mockgen -package=dynamorm_test -destination=expression_mock_test.go . Expression
//

// Package dynamorm_test is a generated GoMock package.
package dynamorm_test

import (
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExpression is a mock of Expression interface.
type MockExpression struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionMockRecorder
	isgomock struct{}
}

// MockExpressionMockRecorder is the mock recorder for MockExpression.
type MockExpressionMockRecorder struct {
	mock *MockExpression
}

// NewMockExpression creates a new mock instance.
func NewMockExpression(ctrl *gomock.Controller) *MockExpression {
	mock := &MockExpression{ctrl: ctrl}
	mock.recorder = &MockExpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpression) EXPECT() *MockExpressionMockRecorder {
	return m.recorder
}

// Condition mocks base method.
func (m *MockExpression) Condition() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Condition")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Condition indicates an expected call of Condition.
func (mr *MockExpressionMockRecorder) Condition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Condition", reflect.TypeOf((*MockExpression)(nil).Condition))
}

// Filter mocks base method.
func (m *MockExpression) Filter() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockExpressionMockRecorder) Filter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockExpression)(nil).Filter))
}

// KeyCondition mocks base method.
func (m *MockExpression) KeyCondition() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyCondition")
	ret0, _ := ret[0].(*string)
	return ret0
}

// KeyCondition indicates an expected call of KeyCondition.
func (mr *MockExpressionMockRecorder) KeyCondition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyCondition", reflect.TypeOf((*MockExpression)(nil).KeyCondition))
}

// Names mocks base method.
func (m *MockExpression) Names() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockExpressionMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockExpression)(nil).Names))
}

// Projection mocks base method.
func (m *MockExpression) Projection() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projection")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Projection indicates an expected call of Projection.
func (mr *MockExpressionMockRecorder) Projection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projection", reflect.TypeOf((*MockExpression)(nil).Projection))
}

// Update mocks base method.
func (m *MockExpression) Update() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(*string)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExpressionMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpression)(nil).Update))
}

// Values mocks base method.
func (m *MockExpression) Values() map[string]types.AttributeValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(map[string]types.AttributeValue)
	return ret0
}

// Values indicates an expected call of Values.
func (mr *MockExpressionMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockExpression)(nil).Values))
}
