// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vpriem/dynamorm (interfaces: EncoderInterface)
//
// Generated by this command:
//
//	mockgen -package=dynamorm_test -destination=encoder_mock_test.go . EncoderInterface
//

// Package dynamorm_test is a generated GoMock package.
package dynamorm_test

import (
	reflect "reflect"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEncoderInterface is a mock of EncoderInterface interface.
type MockEncoderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderInterfaceMockRecorder
	isgomock struct{}
}

// MockEncoderInterfaceMockRecorder is the mock recorder for MockEncoderInterface.
type MockEncoderInterfaceMockRecorder struct {
	mock *MockEncoderInterface
}

// NewMockEncoderInterface creates a new mock instance.
func NewMockEncoderInterface(ctrl *gomock.Controller) *MockEncoderInterface {
	mock := &MockEncoderInterface{ctrl: ctrl}
	mock.recorder = &MockEncoderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoderInterface) EXPECT() *MockEncoderInterfaceMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockEncoderInterface) Encode(arg0 any) (map[string]types.AttributeValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].(map[string]types.AttributeValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderInterfaceMockRecorder) Encode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoderInterface)(nil).Encode), arg0)
}
