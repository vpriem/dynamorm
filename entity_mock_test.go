// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vpriem/dynamorm (interfaces: Entity)
//
// Generated by this command:
//
//	mockgen -package=dynamorm_test -destination=entity_mock_test.go . Entity
//

// Package dynamorm_test is a generated GoMock package.
package dynamorm_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEntity is a mock of Entity interface.
type MockEntity struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMockRecorder
	isgomock struct{}
}

// MockEntityMockRecorder is the mock recorder for MockEntity.
type MockEntityMockRecorder struct {
	mock *MockEntity
}

// NewMockEntity creates a new mock instance.
func NewMockEntity(ctrl *gomock.Controller) *MockEntity {
	mock := &MockEntity{ctrl: ctrl}
	mock.recorder = &MockEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntity) EXPECT() *MockEntityMockRecorder {
	return m.recorder
}

// BeforeSave mocks base method.
func (m *MockEntity) BeforeSave() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeSave")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeSave indicates an expected call of BeforeSave.
func (mr *MockEntityMockRecorder) BeforeSave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeSave", reflect.TypeOf((*MockEntity)(nil).BeforeSave))
}

// GSI1 mocks base method.
func (m *MockEntity) GSI1() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GSI1")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GSI1 indicates an expected call of GSI1.
func (mr *MockEntityMockRecorder) GSI1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GSI1", reflect.TypeOf((*MockEntity)(nil).GSI1))
}

// GSI2 mocks base method.
func (m *MockEntity) GSI2() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GSI2")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GSI2 indicates an expected call of GSI2.
func (mr *MockEntityMockRecorder) GSI2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GSI2", reflect.TypeOf((*MockEntity)(nil).GSI2))
}

// PkSk mocks base method.
func (m *MockEntity) PkSk() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PkSk")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// PkSk indicates an expected call of PkSk.
func (mr *MockEntityMockRecorder) PkSk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PkSk", reflect.TypeOf((*MockEntity)(nil).PkSk))
}
