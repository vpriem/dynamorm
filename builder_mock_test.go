// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vpriem/dynamorm (interfaces: BuilderInterface)
//
// Generated by this command:
//
//	mockgen -package=dynamorm_test -destination=builder_mock_test.go . BuilderInterface
//

// Package dynamorm_test is a generated GoMock package.
package dynamorm_test

import (
	reflect "reflect"

	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	dynamorm "github.com/vpriem/dynamorm"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilderInterface is a mock of BuilderInterface interface.
type MockBuilderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderInterfaceMockRecorder
	isgomock struct{}
}

// MockBuilderInterfaceMockRecorder is the mock recorder for MockBuilderInterface.
type MockBuilderInterfaceMockRecorder struct {
	mock *MockBuilderInterface
}

// NewMockBuilderInterface creates a new mock instance.
func NewMockBuilderInterface(ctrl *gomock.Controller) *MockBuilderInterface {
	mock := &MockBuilderInterface{ctrl: ctrl}
	mock.recorder = &MockBuilderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderInterface) EXPECT() *MockBuilderInterfaceMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBuilderInterface) Build() (dynamorm.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(dynamorm.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockBuilderInterfaceMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilderInterface)(nil).Build))
}

// WithCondition mocks base method.
func (m *MockBuilderInterface) WithCondition(arg0 expression.ConditionBuilder) dynamorm.BuilderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCondition", arg0)
	ret0, _ := ret[0].(dynamorm.BuilderInterface)
	return ret0
}

// WithCondition indicates an expected call of WithCondition.
func (mr *MockBuilderInterfaceMockRecorder) WithCondition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCondition", reflect.TypeOf((*MockBuilderInterface)(nil).WithCondition), arg0)
}

// WithFilter mocks base method.
func (m *MockBuilderInterface) WithFilter(arg0 expression.ConditionBuilder) dynamorm.BuilderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFilter", arg0)
	ret0, _ := ret[0].(dynamorm.BuilderInterface)
	return ret0
}

// WithFilter indicates an expected call of WithFilter.
func (mr *MockBuilderInterfaceMockRecorder) WithFilter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFilter", reflect.TypeOf((*MockBuilderInterface)(nil).WithFilter), arg0)
}

// WithKeyCondition mocks base method.
func (m *MockBuilderInterface) WithKeyCondition(arg0 expression.KeyConditionBuilder) dynamorm.BuilderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithKeyCondition", arg0)
	ret0, _ := ret[0].(dynamorm.BuilderInterface)
	return ret0
}

// WithKeyCondition indicates an expected call of WithKeyCondition.
func (mr *MockBuilderInterfaceMockRecorder) WithKeyCondition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithKeyCondition", reflect.TypeOf((*MockBuilderInterface)(nil).WithKeyCondition), arg0)
}

// WithProjection mocks base method.
func (m *MockBuilderInterface) WithProjection(arg0 expression.ProjectionBuilder) dynamorm.BuilderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithProjection", arg0)
	ret0, _ := ret[0].(dynamorm.BuilderInterface)
	return ret0
}

// WithProjection indicates an expected call of WithProjection.
func (mr *MockBuilderInterfaceMockRecorder) WithProjection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithProjection", reflect.TypeOf((*MockBuilderInterface)(nil).WithProjection), arg0)
}

// WithUpdate mocks base method.
func (m *MockBuilderInterface) WithUpdate(arg0 expression.UpdateBuilder) dynamorm.BuilderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdate", arg0)
	ret0, _ := ret[0].(dynamorm.BuilderInterface)
	return ret0
}

// WithUpdate indicates an expected call of WithUpdate.
func (mr *MockBuilderInterfaceMockRecorder) WithUpdate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdate", reflect.TypeOf((*MockBuilderInterface)(nil).WithUpdate), arg0)
}
